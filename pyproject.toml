[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mlflow-metrics-monitor"
version = "0.1.0"
description = "Dagster pipeline for MLflow metrics monitoring and observability"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Your Name", email = "your.email@company.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10"
dependencies = [
    "dagster>=1.7.0",
    "dagster-aws>=0.23.0",
    "dagster-duckdb>=0.23.0",
    "mlflow>=2.10.0",
    "pandas>=2.2.0",
    "pydantic>=2.6.0",
    "pydantic-settings>=2.2.0",
    "duckdb>=0.10.0",
    "boto3>=1.34.0",
    "requests>=2.31.0",
    "croniter>=2.0.0",
    "numpy>=1.24.0",
    "pyarrow>=15.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.3.0",
    "mypy>=1.9.0",
    "pytest>=8.1.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "pre-commit>=3.6.0",
    "types-requests>=2.31.0",
]
test = [
    "pytest>=8.1.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "moto[s3]>=5.0.0",
]

[project.scripts]
mlflow-monitor = "dagster_pipeline.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["dagster_pipeline", "shared"]

[tool.dagster]
module_name = "dagster_pipeline"

[tool.uv]
dev-dependencies = [
    "ruff>=0.3.0",
    "mypy>=1.9.0",
    "pytest>=8.1.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "pre-commit>=3.6.0",
    "types-requests>=2.31.0",
]

[tool.ruff]
target-version = "py310"
line-length = 88
indent-width = 4
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
select = [
    # Pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-bandit
    "S",
    # flake8-blind-except
    "BLE",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # pandas-vet
    "PD",
    # pylint
    "PL",
    # tryceratops
    "TRY",
    # numpy
    "NPY",
    # ruff-specific
    "RUF",
]
ignore = [
    # Missing docstring in public module
    "D100",
    # Missing docstring in public class
    "D101",
    # Missing docstring in public method
    "D102",
    # Missing docstring in public function
    "D103",
    # Missing docstring in public package
    "D104",
    # Missing docstring in magic method
    "D105",
    # Missing docstring in public nested class
    "D106",
    # Missing docstring in __init__
    "D107",
    # One-line docstring should fit on one line
    "D200",
    # Use triple double quotes """
    "D300",
    # First line should end with a period
    "D400",
    # First line should be in imperative mood
    "D401",
    # Exception must not use a string literal, assign to variable first
    "TRY003",
    # Logging `.exception(...)` should be used instead of `.error(..., exc_info=True)`
    "TRY400",
    # Use `contextlib.suppress()` instead of try-except-pass
    "SIM105",
    # Use capitalized environment variable
    "SIM112",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    # Use of `assert` detected
    "S101",
    # Possible hardcoded password
    "S105",
    # Possible hardcoded password
    "S106",
    # Use of `exec` detected
    "S102",
    # `subprocess` call: check for execution of untrusted input
    "S603",
    # Starting a process with a partial executable path
    "S607",
]
"**/__init__.py" = [
    # Imported but unused
    "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["dagster_pipeline", "shared"]
force-sort-within-sections = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "dagster.*",
    "dagster_aws.*",
    "dagster_duckdb.*",
    "mlflow.*",
    "croniter.*",
    "moto.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=dagster_pipeline",
    "--cov=shared",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["dagster_pipeline", "shared"]
omit = ["*/tests/*", "*/test_*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.cspell]
version = "0.2"
language = "en"
words = [
    # Technical terms
    "dagster",
    "mlflow",
    "duckdb",
    "boto",
    "pydantic",
    "pyproject",
    "croniter",
    "parquet",
    # Business domain
    "observability",
    "ingestion",
    "backfill",
    "lookback",
    "aggregations",
    "enrichment",
    "thresholds",
    "metadata",
    # Common abbreviations
    "args",
    "kwargs",
    "repr",
    "iter",
    "async",
    "await",
    "datetime",
    "timedelta",
    "timestamp",
    "uuid",
    "json",
    "yaml",
    "toml",
    "env",
    "config",
    "cron",
    "auth",
    "api",
    "uri",
    "url",
    "sql",
    "etl",
    "elt",
    "dataframe",
    "dataset",
    "schema",
]
flagWords = []
ignorePaths = [
    "node_modules/**",
    ".git/**",
    ".mypy_cache/**",
    ".pytest_cache/**",
    ".ruff_cache/**",
    "*.pyc",
    "__pycache__/**",
    "build/**",
    "dist/**",
    ".coverage",
    "htmlcov/**",
    "*.egg-info/**",
]
